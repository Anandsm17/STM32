
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ac0  08000ac0  00001ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000acc  08000acc  00001adc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000acc  08000acc  00001acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ad4  08000adc  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad4  08000ad4  00001ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ad8  08000ad8  00001ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001adc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001513  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d2  00000000  00000000  0000301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  000034f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000159d  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000087d  00000000  00000000  00004d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000055c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005d0  00000000  00000000  00005608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000aa8 	.word	0x08000aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000aa8 	.word	0x08000aa8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIO_Init>:
	for (volatile int i = 0; i < 500000; i++);
}

//To Test SPI Send data code
	void SPI2_GPIO_Init(void)
	{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
		GPIO_Handle_t SPI_Pins;
		SPI_Pins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <SPI2_GPIO_Init+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
		SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
		SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
		SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
		SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
		SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80001f2:	2301      	movs	r3, #1
 80001f4:	72bb      	strb	r3, [r7, #10]

		//SCLK Pin
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPI_Pins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f965 	bl	80004cc <GPIO_Init>

		//MOSI
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPI_Pins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f95f 	bl	80004cc <GPIO_Init>

		//NSS
		//SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
		//GPIO_Init(&SPI_Pins);
	}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <SPI2_Init>:

	void SPI2_Init()
	{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
		SPI_Handle_t SPI2Handle;
		SPI2Handle.pSPIx = SPI2;
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <SPI2_Init+0x38>)
 8000224:	603b      	str	r3, [r7, #0]
		SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000226:	2301      	movs	r3, #1
 8000228:	717b      	strb	r3, [r7, #5]
		SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800022a:	2301      	movs	r3, #1
 800022c:	713b      	strb	r3, [r7, #4]
		SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //Generates SCLK of 8Mhz
 800022e:	2300      	movs	r3, #0
 8000230:	71bb      	strb	r3, [r7, #6]
		SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
		SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000236:	2300      	movs	r3, #0
 8000238:	723b      	strb	r3, [r7, #8]
		SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800023a:	2300      	movs	r3, #0
 800023c:	727b      	strb	r3, [r7, #9]
		SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; 	//Software slave management enabled for NSS pin
 800023e:	2301      	movs	r3, #1
 8000240:	72bb      	strb	r3, [r7, #10]
		SPI_Init(&SPI2Handle);
 8000242:	463b      	mov	r3, r7
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fb35 	bl	80008b4 <SPI_Init>
	}
 800024a:	bf00      	nop
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40003800 	.word	0x40003800

08000258 <main>:


int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	char data[] = "Hello world";
 800025e:	4a10      	ldr	r2, [pc, #64]	@ (80002a0 <main+0x48>)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	ca07      	ldmia	r2, {r0, r1, r2}
 8000264:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//SPI_Send data
	SPI2_GPIO_Init();
 8000268:	f7ff ffb6 	bl	80001d8 <SPI2_GPIO_Init>

	SPI2_Init();
 800026c:	f7ff ffd6 	bl	800021c <SPI2_Init>

	//This makes NSS internally high which avoids MODF(mode fault)
	SPI_SSIConfig(SPI2,ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <main+0x4c>)
 8000274:	f000 fba4 	bl	80009c0 <SPI_SSIConfig>

	//Enable the SPI peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	480a      	ldr	r0, [pc, #40]	@ (80002a4 <main+0x4c>)
 800027c:	f000 fb84 	bl	8000988 <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)data, strlen(data));
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ffa0 	bl	80001c8 <strlen>
 8000288:	4602      	mov	r2, r0
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <main+0x4c>)
 8000290:	f000 fbb2 	bl	80009f8 <SPI_SendData>

	SPI_PeripheralControl(SPI2,DISABLE);
 8000294:	2100      	movs	r1, #0
 8000296:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <main+0x4c>)
 8000298:	f000 fb76 	bl	8000988 <SPI_PeripheralControl>



	while(1);
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <main+0x44>
 80002a0:	08000ac0 	.word	0x08000ac0
 80002a4:	40003800 	.word	0x40003800

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fbc3 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffbd 	bl	8000258 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000adc 	.word	0x08000adc
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d162      	bne.n	80003d4 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a64      	ldr	r2, [pc, #400]	@ (80004a4 <GPIO_PeriClockControl+0x1a8>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a63      	ldr	r2, [pc, #396]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
				{
					GPIOI_PCLK_DI();
				}
	}

}
 8000322:	e0b9      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a61      	ldr	r2, [pc, #388]	@ (80004ac <GPIO_PeriClockControl+0x1b0>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800032c:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000330:	4a5d      	ldr	r2, [pc, #372]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000338:	e0ae      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a5c      	ldr	r2, [pc, #368]	@ (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000342:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	4a58      	ldr	r2, [pc, #352]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034e:	e0a3      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a58      	ldr	r2, [pc, #352]	@ (80004b4 <GPIO_PeriClockControl+0x1b8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000358:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a52      	ldr	r2, [pc, #328]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000364:	e098      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a53      	ldr	r2, [pc, #332]	@ (80004b8 <GPIO_PeriClockControl+0x1bc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a4d      	ldr	r2, [pc, #308]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037a:	e08d      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a4f      	ldr	r2, [pc, #316]	@ (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000384:	4b48      	ldr	r3, [pc, #288]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a47      	ldr	r2, [pc, #284]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	e082      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a4a      	ldr	r2, [pc, #296]	@ (80004c0 <GPIO_PeriClockControl+0x1c4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800039a:	4b43      	ldr	r3, [pc, #268]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a42      	ldr	r2, [pc, #264]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a6:	e077      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a46      	ldr	r2, [pc, #280]	@ (80004c4 <GPIO_PeriClockControl+0x1c8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a3c      	ldr	r2, [pc, #240]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003bc:	e06c      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a41      	ldr	r2, [pc, #260]	@ (80004c8 <GPIO_PeriClockControl+0x1cc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d168      	bne.n	8000498 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003c6:	4b38      	ldr	r3, [pc, #224]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a37      	ldr	r2, [pc, #220]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d2:	e061      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a33      	ldr	r2, [pc, #204]	@ (80004a4 <GPIO_PeriClockControl+0x1a8>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 80003dc:	4b32      	ldr	r3, [pc, #200]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a31      	ldr	r2, [pc, #196]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e056      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a2f      	ldr	r2, [pc, #188]	@ (80004ac <GPIO_PeriClockControl+0x1b0>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80003f2:	4b2d      	ldr	r3, [pc, #180]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a2c      	ldr	r2, [pc, #176]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f023 0302 	bic.w	r3, r3, #2
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e04b      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a2b      	ldr	r2, [pc, #172]	@ (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000408:	4b27      	ldr	r3, [pc, #156]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a26      	ldr	r2, [pc, #152]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f023 0304 	bic.w	r3, r3, #4
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	e040      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a26      	ldr	r2, [pc, #152]	@ (80004b4 <GPIO_PeriClockControl+0x1b8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800041e:	4b22      	ldr	r3, [pc, #136]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a21      	ldr	r2, [pc, #132]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f023 0308 	bic.w	r3, r3, #8
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e035      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <GPIO_PeriClockControl+0x1bc>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000434:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a1b      	ldr	r2, [pc, #108]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0310 	bic.w	r3, r3, #16
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e02a      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a1d      	ldr	r2, [pc, #116]	@ (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a16      	ldr	r2, [pc, #88]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0320 	bic.w	r3, r3, #32
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e01f      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a19      	ldr	r2, [pc, #100]	@ (80004c0 <GPIO_PeriClockControl+0x1c4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a10      	ldr	r2, [pc, #64]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e014      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <GPIO_PeriClockControl+0x1c8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a0b      	ldr	r2, [pc, #44]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e009      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a10      	ldr	r2, [pc, #64]	@ (80004c8 <GPIO_PeriClockControl+0x1cc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d105      	bne.n	8000498 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021400 	.word	0x40021400
 80004c0:	40021800 	.word	0x40021800
 80004c4:	40021c00 	.word	0x40021c00
 80004c8:	40022000 	.word	0x40022000

080004cc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff0c 	bl	80002fc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d820      	bhi.n	800052e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	2103      	movs	r1, #3
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	43db      	mvns	r3, r3
 8000512:	4619      	mov	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	400a      	ands	r2, r1
 800051a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e0cc      	b.n	80006c8 <GPIO_Init+0x1fc>
	}else

	{
		//Interrupt modes
		//1. Configure the FTSR mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	795b      	ldrb	r3, [r3, #5]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d117      	bne.n	8000566 <GPIO_Init+0x9a>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <GPIO_Init+0x198>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	4611      	mov	r1, r2
 8000546:	4a47      	ldr	r2, [pc, #284]	@ (8000664 <GPIO_Init+0x198>)
 8000548:	430b      	orrs	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]

			//Clear the corresponding RTST bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054c:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <GPIO_Init+0x198>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	43d2      	mvns	r2, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a41      	ldr	r2, [pc, #260]	@ (8000664 <GPIO_Init+0x198>)
 8000560:	400b      	ands	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
 8000564:	e035      	b.n	80005d2 <GPIO_Init+0x106>

		}
		//2. Configure the RTSR mode
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d117      	bne.n	800059e <GPIO_Init+0xd2>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056e:	4b3d      	ldr	r3, [pc, #244]	@ (8000664 <GPIO_Init+0x198>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	4611      	mov	r1, r2
 800057e:	4a39      	ldr	r2, [pc, #228]	@ (8000664 <GPIO_Init+0x198>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6093      	str	r3, [r2, #8]

			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000584:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <GPIO_Init+0x198>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	43d2      	mvns	r2, r2
 8000594:	4611      	mov	r1, r2
 8000596:	4a33      	ldr	r2, [pc, #204]	@ (8000664 <GPIO_Init+0x198>)
 8000598:	400b      	ands	r3, r1
 800059a:	60d3      	str	r3, [r2, #12]
 800059c:	e019      	b.n	80005d2 <GPIO_Init+0x106>


		}
		//3. Configure the FTSR and RTSR mode
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d115      	bne.n	80005d2 <GPIO_Init+0x106>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <GPIO_Init+0x198>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000664 <GPIO_Init+0x198>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <GPIO_Init+0x198>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a25      	ldr	r2, [pc, #148]	@ (8000664 <GPIO_Init+0x198>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in  SYSCFG_EXTICR
		uint32_t temp1 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	089b      	lsrs	r3, r3, #2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	613b      	str	r3, [r7, #16]
		uint32_t temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	60fb      	str	r3, [r7, #12]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <GPIO_Init+0x19c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d04d      	beq.n	800068c <GPIO_Init+0x1c0>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	@ (800066c <GPIO_Init+0x1a0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d032      	beq.n	8000660 <GPIO_Init+0x194>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <GPIO_Init+0x1a4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d02b      	beq.n	800065c <GPIO_Init+0x190>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <GPIO_Init+0x1a8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d024      	beq.n	8000658 <GPIO_Init+0x18c>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <GPIO_Init+0x1ac>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d01d      	beq.n	8000654 <GPIO_Init+0x188>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a17      	ldr	r2, [pc, #92]	@ (800067c <GPIO_Init+0x1b0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d016      	beq.n	8000650 <GPIO_Init+0x184>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <GPIO_Init+0x1b4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00f      	beq.n	800064c <GPIO_Init+0x180>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <GPIO_Init+0x1b8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <GPIO_Init+0x17c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <GPIO_Init+0x1bc>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <GPIO_Init+0x178>
 8000640:	2308      	movs	r3, #8
 8000642:	e024      	b.n	800068e <GPIO_Init+0x1c2>
 8000644:	2300      	movs	r3, #0
 8000646:	e022      	b.n	800068e <GPIO_Init+0x1c2>
 8000648:	2307      	movs	r3, #7
 800064a:	e020      	b.n	800068e <GPIO_Init+0x1c2>
 800064c:	2306      	movs	r3, #6
 800064e:	e01e      	b.n	800068e <GPIO_Init+0x1c2>
 8000650:	2305      	movs	r3, #5
 8000652:	e01c      	b.n	800068e <GPIO_Init+0x1c2>
 8000654:	2304      	movs	r3, #4
 8000656:	e01a      	b.n	800068e <GPIO_Init+0x1c2>
 8000658:	2303      	movs	r3, #3
 800065a:	e018      	b.n	800068e <GPIO_Init+0x1c2>
 800065c:	2302      	movs	r3, #2
 800065e:	e016      	b.n	800068e <GPIO_Init+0x1c2>
 8000660:	2301      	movs	r3, #1
 8000662:	e014      	b.n	800068e <GPIO_Init+0x1c2>
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	40022000 	.word	0x40022000
 800068c:	2300      	movs	r3, #0
 800068e:	72fb      	strb	r3, [r7, #11]
		SYSCFG_PCLK_EN();
 8000690:	4b59      	ldr	r3, [pc, #356]	@ (80007f8 <GPIO_Init+0x32c>)
 8000692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000694:	4a58      	ldr	r2, [pc, #352]	@ (80007f8 <GPIO_Init+0x32c>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800069c:	7afa      	ldrb	r2, [r7, #11]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	4a55      	ldr	r2, [pc, #340]	@ (80007fc <GPIO_Init+0x330>)
 80006a8:	4619      	mov	r1, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	3302      	adds	r3, #2
 80006ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. Enable  the EXTI interrupt delivery using IMR
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006b2:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <GPIO_Init+0x334>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	7912      	ldrb	r2, [r2, #4]
 80006ba:	4611      	mov	r1, r2
 80006bc:	2201      	movs	r2, #1
 80006be:	408a      	lsls	r2, r1
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000800 <GPIO_Init+0x334>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	6013      	str	r3, [r2, #0]

	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	799b      	ldrb	r3, [r3, #6]
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	2103      	movs	r1, #3
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6899      	ldr	r1, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	79db      	ldrb	r3, [r3, #7]
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	2103      	movs	r1, #3
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d9      	ldr	r1, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	430a      	orrs	r2, r1
 8000746:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7a1b      	ldrb	r3, [r3, #8]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4619      	mov	r1, r3
 8000764:	2301      	movs	r3, #1
 8000766:	408b      	lsls	r3, r1
 8000768:	43db      	mvns	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	400a      	ands	r2, r1
 8000772:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6859      	ldr	r1, [r3, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	430a      	orrs	r2, r1
 8000782:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d131      	bne.n	80007f0 <GPIO_Init+0x324>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	72bb      	strb	r3, [r7, #10]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	727b      	strb	r3, [r7, #9]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	7aba      	ldrb	r2, [r7, #10]
 80007a4:	3208      	adds	r2, #8
 80007a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007aa:	7a7b      	ldrb	r3, [r7, #9]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	220f      	movs	r2, #15
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7aba      	ldrb	r2, [r7, #10]
 80007be:	4001      	ands	r1, r0
 80007c0:	3208      	adds	r2, #8
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	7aba      	ldrb	r2, [r7, #10]
 80007cc:	3208      	adds	r2, #8
 80007ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a5b      	ldrb	r3, [r3, #9]
 80007d6:	461a      	mov	r2, r3
 80007d8:	7a7b      	ldrb	r3, [r7, #9]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	7aba      	ldrb	r2, [r7, #10]
 80007e8:	4301      	orrs	r1, r0
 80007ea:	3208      	adds	r2, #8
 80007ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40013800 	.word	0x40013800
 8000800:	40013c00 	.word	0x40013c00

08000804 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d120      	bne.n	8000858 <SPI_PeriClockControl+0x54>
	{
		if (pSPIx == SPI1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <SPI_PeriClockControl+0xa0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000822:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000828:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 800082a:	e035      	b.n	8000898 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <SPI_PeriClockControl+0xa8>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000840:	e02a      	b.n	8000898 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a1a      	ldr	r2, [pc, #104]	@ (80008b0 <SPI_PeriClockControl+0xac>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d126      	bne.n	8000898 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000856:	e01f      	b.n	8000898 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <SPI_PeriClockControl+0xa0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d106      	bne.n	800086e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000864:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800086a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800086c:	e014      	b.n	8000898 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <SPI_PeriClockControl+0xa8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d106      	bne.n	8000884 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 800087c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000882:	e009      	b.n	8000898 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <SPI_PeriClockControl+0xac>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SPI_PeriClockControl+0xa4>)
 8000892:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000896:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40003800 	.word	0x40003800
 80008b0:	40003c00 	.word	0x40003c00

080008b4 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

	//Enable the SPI peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff9e 	bl	8000804 <SPI_PeriClockControl>
	//Configure SPI_CR1 register

	uint32_t tempreg=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

	//configure the device mode

	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus mode
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d104      	bne.n	80008ea <SPI_Init+0x36>
	{
				//bidi mode should be cleared
		tempreg &= ~(1 <<15);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e014      	b.n	8000914 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d104      	bne.n	80008fc <SPI_Init+0x48>
	{
			//bidi mode should be set
		tempreg |= (1 <<15);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e00b      	b.n	8000914 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	795b      	ldrb	r3, [r3, #5]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d107      	bne.n	8000914 <SPI_Init+0x60>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 <<15);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800090a:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 <<10);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI peripheral clock
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	799b      	ldrb	r3, [r3, #6]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF

	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	79db      	ldrb	r3, [r3, #7]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

	//5. Configure  the CPOL

	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7a1b      	ldrb	r3, [r3, #8]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4313      	orrs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

	//6. Configure the  CPHA

	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7a9b      	ldrb	r3, [r3, #10]
 8000948:	025b      	lsls	r3, r3, #9
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4313      	orrs	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t* pSPIx, uint32_t  FlagName)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	4013      	ands	r3, r2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <SPI_GetFlagStatus+0x1c>
	else

		return FLAG_RESET;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d106      	bne.n	80009a8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80009a6:	e005      	b.n	80009b4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d106      	bne.n	80009e0 <SPI_SSIConfig+0x20>
		{
			pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
		}else
		{
			pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
		}
}
 80009de:	e005      	b.n	80009ec <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)  //Polling based function code
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a04:	e024      	b.n	8000a50 <SPI_SendData+0x58>
	{
		//1. Wait until TXE is Set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG == FLAG_RESET));
 8000a06:	bf00      	nop
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ffa8 	bl	8000960 <SPI_GetFlagStatus>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f8      	bne.n	8000a08 <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00b      	beq.n	8000a3a <SPI_SendData+0x42>
		{
			//16 bit
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	60da      	str	r2, [r3, #12]
			Len -= 2;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	e00a      	b.n	8000a50 <SPI_SendData+0x58>
		}
		else
		{
			//8 bit
			pSPIx->DR = *(pTxBuffer);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	60da      	str	r2, [r3, #12]
			Len--;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1d7      	bne.n	8000a06 <SPI_SendData+0xe>
		}
	}
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	4d0d      	ldr	r5, [pc, #52]	@ (8000a98 <__libc_init_array+0x38>)
 8000a64:	4c0d      	ldr	r4, [pc, #52]	@ (8000a9c <__libc_init_array+0x3c>)
 8000a66:	1b64      	subs	r4, r4, r5
 8000a68:	10a4      	asrs	r4, r4, #2
 8000a6a:	2600      	movs	r6, #0
 8000a6c:	42a6      	cmp	r6, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	4d0b      	ldr	r5, [pc, #44]	@ (8000aa0 <__libc_init_array+0x40>)
 8000a72:	4c0c      	ldr	r4, [pc, #48]	@ (8000aa4 <__libc_init_array+0x44>)
 8000a74:	f000 f818 	bl	8000aa8 <_init>
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	10a4      	asrs	r4, r4, #2
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	42a6      	cmp	r6, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a88:	4798      	blx	r3
 8000a8a:	3601      	adds	r6, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a92:	4798      	blx	r3
 8000a94:	3601      	adds	r6, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	08000ad4 	.word	0x08000ad4
 8000a9c:	08000ad4 	.word	0x08000ad4
 8000aa0:	08000ad4 	.word	0x08000ad4
 8000aa4:	08000ad8 	.word	0x08000ad8

08000aa8 <_init>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr

08000ab4 <_fini>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr
